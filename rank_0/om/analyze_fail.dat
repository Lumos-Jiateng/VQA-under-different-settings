# [No.1] construct_wrapper.28
# In file /nfs4-p1/ljt/NLP/final_project/wez/vqa/vqasim_for_train.py(101)/    def construct(self, source_input, image_vec):/
funcgraph fg_28(
        %para1 : Tensor(F32)[4, 512, 1024]    # source_input
        , %para2 : Tensor(F32)[4, 640, 480, 3]    # image_vec
        , %para3 : Ref[Tensor(F32)][64, 3, 7, 7]    # resnet.conv1.weight
        , %para4 : Ref[Tensor(F32)][1024]    # reduce.bias
        , %para5 : Ref[Tensor(F32)][1024, 2048]    # reduce.weight
        , %para6 : Ref[Tensor(F32)][512]    # attn_dense.bias
        , %para7 : Ref[Tensor(F32)][512, 1024]    # attn_dense.weight
        , %para8 : Ref[Tensor(F32)][64]    # resnet.bn1.gamma
        , %para9 : Ref[Tensor(F32)][64]    # resnet.bn1.beta
        , %para10 : Ref[Tensor(F32)][64]    # resnet.bn1.moving_mean
        , %para11 : Ref[Tensor(F32)][64]    # resnet.bn1.moving_variance
        , %para12 : Ref[Tensor(F32)][1024]    # resnet.end_point.bias
        , %para13 : Ref[Tensor(F32)][1024, 2048]    # resnet.end_point.weight
        , %para14 : Ref[Tensor(F32)][512, 512, 3, 3]    # resnet.layer4.0.conv2.weight
        , %para15 : Ref[Tensor(F32)][512, 512, 3, 3]    # resnet.layer4.1.conv2.weight
        , %para16 : Ref[Tensor(F32)][512, 512, 3, 3]    # resnet.layer4.2.conv2.weight
        , %para17 : Ref[Tensor(F32)][512, 1024, 1, 1]    # resnet.layer4.0.conv1.weight
        , %para18 : Ref[Tensor(F32)][512, 2048, 1, 1]    # resnet.layer4.1.conv1.weight
        , %para19 : Ref[Tensor(F32)][512, 2048, 1, 1]    # resnet.layer4.2.conv1.weight
        , %para20 : Ref[Tensor(F32)][256, 256, 3, 3]    # resnet.layer3.0.conv2.weight
        , %para21 : Ref[Tensor(F32)][256, 256, 3, 3]    # resnet.layer3.1.conv2.weight
        , %para22 : Ref[Tensor(F32)][256, 256, 3, 3]    # resnet.layer3.2.conv2.weight
        , %para23 : Ref[Tensor(F32)][256, 256, 3, 3]    # resnet.layer3.3.conv2.weight
        , %para24 : Ref[Tensor(F32)][256, 256, 3, 3]    # resnet.layer3.4.conv2.weight
        , %para25 : Ref[Tensor(F32)][256, 256, 3, 3]    # resnet.layer3.5.conv2.weight
        , %para26 : Ref[Tensor(F32)][256, 512, 1, 1]    # resnet.layer3.0.conv1.weight
        , %para27 : Ref[Tensor(F32)][256, 1024, 1, 1]    # resnet.layer3.1.conv1.weight
        , %para28 : Ref[Tensor(F32)][256, 1024, 1, 1]    # resnet.layer3.2.conv1.weight
        , %para29 : Ref[Tensor(F32)][256, 1024, 1, 1]    # resnet.layer3.3.conv1.weight
        , %para30 : Ref[Tensor(F32)][256, 1024, 1, 1]    # resnet.layer3.4.conv1.weight
        , %para31 : Ref[Tensor(F32)][256, 1024, 1, 1]    # resnet.layer3.5.conv1.weight
        , %para32 : Ref[Tensor(F32)][128, 128, 3, 3]    # resnet.layer2.0.conv2.weight
        , %para33 : Ref[Tensor(F32)][128, 128, 3, 3]    # resnet.layer2.1.conv2.weight
        , %para34 : Ref[Tensor(F32)][128, 128, 3, 3]    # resnet.layer2.2.conv2.weight
        , %para35 : Ref[Tensor(F32)][128, 128, 3, 3]    # resnet.layer2.3.conv2.weight
        , %para36 : Ref[Tensor(F32)][512]    # resnet.layer4.0.bn2.gamma
        , %para37 : Ref[Tensor(F32)][512]    # resnet.layer4.0.bn2.beta
        , %para38 : Ref[Tensor(F32)][512]    # resnet.layer4.0.bn2.moving_mean
        , %para39 : Ref[Tensor(F32)][512]    # resnet.layer4.0.bn2.moving_variance
        , %para40 : Ref[Tensor(F32)][512]    # resnet.layer4.1.bn2.gamma
        , %para41 : Ref[Tensor(F32)][512]    # resnet.layer4.1.bn2.beta
        , %para42 : Ref[Tensor(F32)][512]    # resnet.layer4.1.bn2.moving_mean
        , %para43 : Ref[Tensor(F32)][512]    # resnet.layer4.1.bn2.moving_variance
        , %para44 : Ref[Tensor(F32)][512]    # resnet.layer4.2.bn2.gamma
        , %para45 : Ref[Tensor(F32)][512]    # resnet.layer4.2.bn2.beta
        , %para46 : Ref[Tensor(F32)][512]    # resnet.layer4.2.bn2.moving_mean
        , %para47 : Ref[Tensor(F32)][512]    # resnet.layer4.2.bn2.moving_variance
        , %para48 : Ref[Tensor(F32)][128, 256, 1, 1]    # resnet.layer2.0.conv1.weight
        , %para49 : Ref[Tensor(F32)][128, 512, 1, 1]    # resnet.layer2.1.conv1.weight
        , %para50 : Ref[Tensor(F32)][128, 512, 1, 1]    # resnet.layer2.2.conv1.weight
        , %para51 : Ref[Tensor(F32)][128, 512, 1, 1]    # resnet.layer2.3.conv1.weight
        , %para52 : Ref[Tensor(F32)][64, 64, 3, 3]    # resnet.layer1.0.conv2.weight
        , %para53 : Ref[Tensor(F32)][64, 64, 3, 3]    # resnet.layer1.1.conv2.weight
        , %para54 : Ref[Tensor(F32)][64, 64, 3, 3]    # resnet.layer1.2.conv2.weight
        , %para55 : Ref[Tensor(F32)][4096, 1024]    # seq2seq.weight_ih_l0
        , %para56 : Ref[Tensor(F32)][4096, 1024]    # seq2seq.weight_ih_l0_reverse
        , %para57 : Ref[Tensor(F32)][4096, 2048]    # seq2seq.weight_ih_l1
        , %para58 : Ref[Tensor(F32)][4096, 2048]    # seq2seq.weight_ih_l1_reverse
        , %para59 : Ref[Tensor(F32)][4096, 1024]    # seq2seq.weight_hh_l0
        , %para60 : Ref[Tensor(F32)][4096, 1024]    # seq2seq.weight_hh_l0_reverse
        , %para61 : Ref[Tensor(F32)][4096, 1024]    # seq2seq.weight_hh_l1
        , %para62 : Ref[Tensor(F32)][4096, 1024]    # seq2seq.weight_hh_l1_reverse
        , %para63 : Ref[Tensor(F32)][4096]    # seq2seq.bias_ih_l0
        , %para64 : Ref[Tensor(F32)][4096]    # seq2seq.bias_ih_l0_reverse
        , %para65 : Ref[Tensor(F32)][4096]    # seq2seq.bias_ih_l1
        , %para66 : Ref[Tensor(F32)][4096]    # seq2seq.bias_ih_l1_reverse
        , %para67 : Ref[Tensor(F32)][4096]    # seq2seq.bias_hh_l0
        , %para68 : Ref[Tensor(F32)][4096]    # seq2seq.bias_hh_l0_reverse
        , %para69 : Ref[Tensor(F32)][4096]    # seq2seq.bias_hh_l1
        , %para70 : Ref[Tensor(F32)][4096]    # seq2seq.bias_hh_l1_reverse
        , %para71 : Ref[Tensor(F32)][2048, 512, 1, 1]    # resnet.layer4.0.conv3.weight
        , %para72 : Ref[Tensor(F32)][512]    # resnet.layer4.0.bn1.gamma
        , %para73 : Ref[Tensor(F32)][512]    # resnet.layer4.0.bn1.beta
        , %para74 : Ref[Tensor(F32)][512]    # resnet.layer4.0.bn1.moving_mean
        , %para75 : Ref[Tensor(F32)][512]    # resnet.layer4.0.bn1.moving_variance
        , %para76 : Ref[Tensor(F32)][2048, 512, 1, 1]    # resnet.layer4.1.conv3.weight
        , %para77 : Ref[Tensor(F32)][512]    # resnet.layer4.1.bn1.gamma
        , %para78 : Ref[Tensor(F32)][512]    # resnet.layer4.1.bn1.beta
        , %para79 : Ref[Tensor(F32)][512]    # resnet.layer4.1.bn1.moving_mean
        , %para80 : Ref[Tensor(F32)][512]    # resnet.layer4.1.bn1.moving_variance
        , %para81 : Ref[Tensor(F32)][2048, 512, 1, 1]    # resnet.layer4.2.conv3.weight
        , %para82 : Ref[Tensor(F32)][512]    # resnet.layer4.2.bn1.gamma
        , %para83 : Ref[Tensor(F32)][512]    # resnet.layer4.2.bn1.beta
        , %para84 : Ref[Tensor(F32)][512]    # resnet.layer4.2.bn1.moving_mean
        , %para85 : Ref[Tensor(F32)][512]    # resnet.layer4.2.bn1.moving_variance
        , %para86 : Ref[Tensor(F32)][256]    # resnet.layer3.0.bn2.gamma
        , %para87 : Ref[Tensor(F32)][256]    # resnet.layer3.0.bn2.beta
        , %para88 : Ref[Tensor(F32)][256]    # resnet.layer3.0.bn2.moving_mean
        , %para89 : Ref[Tensor(F32)][256]    # resnet.layer3.0.bn2.moving_variance
        , %para90 : Ref[Tensor(F32)][256]    # resnet.layer3.1.bn2.gamma
        , %para91 : Ref[Tensor(F32)][256]    # resnet.layer3.1.bn2.beta
        , %para92 : Ref[Tensor(F32)][256]    # resnet.layer3.1.bn2.moving_mean
        , %para93 : Ref[Tensor(F32)][256]    # resnet.layer3.1.bn2.moving_variance
        , %para94 : Ref[Tensor(F32)][256]    # resnet.layer3.2.bn2.gamma
        , %para95 : Ref[Tensor(F32)][256]    # resnet.layer3.2.bn2.beta
        , %para96 : Ref[Tensor(F32)][256]    # resnet.layer3.2.bn2.moving_mean
        , %para97 : Ref[Tensor(F32)][256]    # resnet.layer3.2.bn2.moving_variance
        , %para98 : Ref[Tensor(F32)][256]    # resnet.layer3.3.bn2.gamma
        , %para99 : Ref[Tensor(F32)][256]    # resnet.layer3.3.bn2.beta
        , %para100 : Ref[Tensor(F32)][256]    # resnet.layer3.3.bn2.moving_mean
        , %para101 : Ref[Tensor(F32)][256]    # resnet.layer3.3.bn2.moving_variance
        , %para102 : Ref[Tensor(F32)][256]    # resnet.layer3.4.bn2.gamma
        , %para103 : Ref[Tensor(F32)][256]    # resnet.layer3.4.bn2.beta
        , %para104 : Ref[Tensor(F32)][256]    # resnet.layer3.4.bn2.moving_mean
        , %para105 : Ref[Tensor(F32)][256]    # resnet.layer3.4.bn2.moving_variance
        , %para106 : Ref[Tensor(F32)][256]    # resnet.layer3.5.bn2.gamma
        , %para107 : Ref[Tensor(F32)][256]    # resnet.layer3.5.bn2.beta
        , %para108 : Ref[Tensor(F32)][256]    # resnet.layer3.5.bn2.moving_mean
        , %para109 : Ref[Tensor(F32)][256]    # resnet.layer3.5.bn2.moving_variance
        , %para110 : Ref[Tensor(F32)][64, 64, 1, 1]    # resnet.layer1.0.conv1.weight
        , %para111 : Ref[Tensor(F32)][64, 256, 1, 1]    # resnet.layer1.1.conv1.weight
        , %para112 : Ref[Tensor(F32)][64, 256, 1, 1]    # resnet.layer1.2.conv1.weight
        , %para113 : Ref[Tensor(F32)][1024, 256, 1, 1]    # resnet.layer3.0.conv3.weight
        , %para114 : Ref[Tensor(F32)][256]    # resnet.layer3.0.bn1.gamma
        , %para115 : Ref[Tensor(F32)][256]    # resnet.layer3.0.bn1.beta
        , %para116 : Ref[Tensor(F32)][256]    # resnet.layer3.0.bn1.moving_mean
        , %para117 : Ref[Tensor(F32)][256]    # resnet.layer3.0.bn1.moving_variance
        , %para118 : Ref[Tensor(F32)][1024, 256, 1, 1]    # resnet.layer3.1.conv3.weight
        , %para119 : Ref[Tensor(F32)][256]    # resnet.layer3.1.bn1.gamma
        , %para120 : Ref[Tensor(F32)][256]    # resnet.layer3.1.bn1.beta
        , %para121 : Ref[Tensor(F32)][256]    # resnet.layer3.1.bn1.moving_mean
        , %para122 : Ref[Tensor(F32)][256]    # resnet.layer3.1.bn1.moving_variance
        , %para123 : Ref[Tensor(F32)][1024, 256, 1, 1]    # resnet.layer3.2.conv3.weight
        , %para124 : Ref[Tensor(F32)][256]    # resnet.layer3.2.bn1.gamma
        , %para125 : Ref[Tensor(F32)][256]    # resnet.layer3.2.bn1.beta
        , %para126 : Ref[Tensor(F32)][256]    # resnet.layer3.2.bn1.moving_mean
        , %para127 : Ref[Tensor(F32)][256]    # resnet.layer3.2.bn1.moving_variance
        , %para128 : Ref[Tensor(F32)][1024, 256, 1, 1]    # resnet.layer3.3.conv3.weight
        , %para129 : Ref[Tensor(F32)][256]    # resnet.layer3.3.bn1.gamma
        , %para130 : Ref[Tensor(F32)][256]    # resnet.layer3.3.bn1.beta
        , %para131 : Ref[Tensor(F32)][256]    # resnet.layer3.3.bn1.moving_mean
        , %para132 : Ref[Tensor(F32)][256]    # resnet.layer3.3.bn1.moving_variance
        , %para133 : Ref[Tensor(F32)][1024, 256, 1, 1]    # resnet.layer3.4.conv3.weight
        , %para134 : Ref[Tensor(F32)][256]    # resnet.layer3.4.bn1.gamma
        , %para135 : Ref[Tensor(F32)][256]    # resnet.layer3.4.bn1.beta
        , %para136 : Ref[Tensor(F32)][256]    # resnet.layer3.4.bn1.moving_mean
        , %para137 : Ref[Tensor(F32)][256]    # resnet.layer3.4.bn1.moving_variance
        , %para138 : Ref[Tensor(F32)][1024, 256, 1, 1]    # resnet.layer3.5.conv3.weight
        , %para139 : Ref[Tensor(F32)][256]    # resnet.layer3.5.bn1.gamma
        , %para140 : Ref[Tensor(F32)][256]    # resnet.layer3.5.bn1.beta
        , %para141 : Ref[Tensor(F32)][256]    # resnet.layer3.5.bn1.moving_mean
        , %para142 : Ref[Tensor(F32)][256]    # resnet.layer3.5.bn1.moving_variance
        , %para143 : Ref[Tensor(F32)][128]    # resnet.layer2.0.bn2.gamma
        , %para144 : Ref[Tensor(F32)][128]    # resnet.layer2.0.bn2.beta
        , %para145 : Ref[Tensor(F32)][128]    # resnet.layer2.0.bn2.moving_mean
        , %para146 : Ref[Tensor(F32)][128]    # resnet.layer2.0.bn2.moving_variance
        , %para147 : Ref[Tensor(F32)][128]    # resnet.layer2.1.bn2.gamma
        , %para148 : Ref[Tensor(F32)][128]    # resnet.layer2.1.bn2.beta
        , %para149 : Ref[Tensor(F32)][128]    # resnet.layer2.1.bn2.moving_mean
        , %para150 : Ref[Tensor(F32)][128]    # resnet.layer2.1.bn2.moving_variance
        , %para151 : Ref[Tensor(F32)][128]    # resnet.layer2.2.bn2.gamma
        , %para152 : Ref[Tensor(F32)][128]    # resnet.layer2.2.bn2.beta
        , %para153 : Ref[Tensor(F32)][128]    # resnet.layer2.2.bn2.moving_mean
        , %para154 : Ref[Tensor(F32)][128]    # resnet.layer2.2.bn2.moving_variance
        , %para155 : Ref[Tensor(F32)][128]    # resnet.layer2.3.bn2.gamma
        , %para156 : Ref[Tensor(F32)][128]    # resnet.layer2.3.bn2.beta
        , %para157 : Ref[Tensor(F32)][128]    # resnet.layer2.3.bn2.moving_mean
        , %para158 : Ref[Tensor(F32)][128]    # resnet.layer2.3.bn2.moving_variance
        , %para159 : Ref[Tensor(F32)][512, 128, 1, 1]    # resnet.layer2.0.conv3.weight
        , %para160 : Ref[Tensor(F32)][128]    # resnet.layer2.0.bn1.gamma
        , %para161 : Ref[Tensor(F32)][128]    # resnet.layer2.0.bn1.beta
        , %para162 : Ref[Tensor(F32)][128]    # resnet.layer2.0.bn1.moving_mean
        , %para163 : Ref[Tensor(F32)][128]    # resnet.layer2.0.bn1.moving_variance
        , %para164 : Ref[Tensor(F32)][512, 128, 1, 1]    # resnet.layer2.1.conv3.weight
        , %para165 : Ref[Tensor(F32)][128]    # resnet.layer2.1.bn1.gamma
        , %para166 : Ref[Tensor(F32)][128]    # resnet.layer2.1.bn1.beta
        , %para167 : Ref[Tensor(F32)][128]    # resnet.layer2.1.bn1.moving_mean
        , %para168 : Ref[Tensor(F32)][128]    # resnet.layer2.1.bn1.moving_variance
        , %para169 : Ref[Tensor(F32)][512, 128, 1, 1]    # resnet.layer2.2.conv3.weight
        , %para170 : Ref[Tensor(F32)][128]    # resnet.layer2.2.bn1.gamma
        , %para171 : Ref[Tensor(F32)][128]    # resnet.layer2.2.bn1.beta
        , %para172 : Ref[Tensor(F32)][128]    # resnet.layer2.2.bn1.moving_mean
        , %para173 : Ref[Tensor(F32)][128]    # resnet.layer2.2.bn1.moving_variance
        , %para174 : Ref[Tensor(F32)][512, 128, 1, 1]    # resnet.layer2.3.conv3.weight
        , %para175 : Ref[Tensor(F32)][128]    # resnet.layer2.3.bn1.gamma
        , %para176 : Ref[Tensor(F32)][128]    # resnet.layer2.3.bn1.beta
        , %para177 : Ref[Tensor(F32)][128]    # resnet.layer2.3.bn1.moving_mean
        , %para178 : Ref[Tensor(F32)][128]    # resnet.layer2.3.bn1.moving_variance
        , %para179 : Ref[Tensor(F32)][64]    # resnet.layer1.0.bn2.gamma
        , %para180 : Ref[Tensor(F32)][64]    # resnet.layer1.0.bn2.beta
        , %para181 : Ref[Tensor(F32)][64]    # resnet.layer1.0.bn2.moving_mean
        , %para182 : Ref[Tensor(F32)][64]    # resnet.layer1.0.bn2.moving_variance
        , %para183 : Ref[Tensor(F32)][64]    # resnet.layer1.1.bn2.gamma
        , %para184 : Ref[Tensor(F32)][64]    # resnet.layer1.1.bn2.beta
        , %para185 : Ref[Tensor(F32)][64]    # resnet.layer1.1.bn2.moving_mean
        , %para186 : Ref[Tensor(F32)][64]    # resnet.layer1.1.bn2.moving_variance
        , %para187 : Ref[Tensor(F32)][64]    # resnet.layer1.2.bn2.gamma
        , %para188 : Ref[Tensor(F32)][64]    # resnet.layer1.2.bn2.beta
        , %para189 : Ref[Tensor(F32)][64]    # resnet.layer1.2.bn2.moving_mean
        , %para190 : Ref[Tensor(F32)][64]    # resnet.layer1.2.bn2.moving_variance
        , %para191 : Ref[Tensor(F32)][2048]    # resnet.layer4.0.bn3.gamma
        , %para192 : Ref[Tensor(F32)][2048]    # resnet.layer4.0.bn3.beta
        , %para193 : Ref[Tensor(F32)][2048]    # resnet.layer4.0.bn3.moving_mean
        , %para194 : Ref[Tensor(F32)][2048]    # resnet.layer4.0.bn3.moving_variance
        , %para195 : Ref[Tensor(F32)][2048]    # resnet.layer4.1.bn3.gamma
        , %para196 : Ref[Tensor(F32)][2048]    # resnet.layer4.1.bn3.beta
        , %para197 : Ref[Tensor(F32)][2048]    # resnet.layer4.1.bn3.moving_mean
        , %para198 : Ref[Tensor(F32)][2048]    # resnet.layer4.1.bn3.moving_variance
        , %para199 : Ref[Tensor(F32)][2048]    # resnet.layer4.2.bn3.gamma
        , %para200 : Ref[Tensor(F32)][2048]    # resnet.layer4.2.bn3.beta
        , %para201 : Ref[Tensor(F32)][2048]    # resnet.layer4.2.bn3.moving_mean
        , %para202 : Ref[Tensor(F32)][2048]    # resnet.layer4.2.bn3.moving_variance
        , %para203 : Ref[Tensor(F32)][256, 64, 1, 1]    # resnet.layer1.0.conv3.weight
        , %para204 : Ref[Tensor(F32)][64]    # resnet.layer1.0.bn1.gamma
        , %para205 : Ref[Tensor(F32)][64]    # resnet.layer1.0.bn1.beta
        , %para206 : Ref[Tensor(F32)][64]    # resnet.layer1.0.bn1.moving_mean
        , %para207 : Ref[Tensor(F32)][64]    # resnet.layer1.0.bn1.moving_variance
        , %para208 : Ref[Tensor(F32)][256, 64, 1, 1]    # resnet.layer1.1.conv3.weight
        , %para209 : Ref[Tensor(F32)][64]    # resnet.layer1.1.bn1.gamma
        , %para210 : Ref[Tensor(F32)][64]    # resnet.layer1.1.bn1.beta
        , %para211 : Ref[Tensor(F32)][64]    # resnet.layer1.1.bn1.moving_mean
        , %para212 : Ref[Tensor(F32)][64]    # resnet.layer1.1.bn1.moving_variance
        , %para213 : Ref[Tensor(F32)][256, 64, 1, 1]    # resnet.layer1.2.conv3.weight
        , %para214 : Ref[Tensor(F32)][64]    # resnet.layer1.2.bn1.gamma
        , %para215 : Ref[Tensor(F32)][64]    # resnet.layer1.2.bn1.beta
        , %para216 : Ref[Tensor(F32)][64]    # resnet.layer1.2.bn1.moving_mean
        , %para217 : Ref[Tensor(F32)][64]    # resnet.layer1.2.bn1.moving_variance
        , %para218 : Ref[Tensor(F32)][1024]    # resnet.layer3.0.bn3.gamma
        , %para219 : Ref[Tensor(F32)][1024]    # resnet.layer3.0.bn3.beta
        , %para220 : Ref[Tensor(F32)][1024]    # resnet.layer3.0.bn3.moving_mean
        , %para221 : Ref[Tensor(F32)][1024]    # resnet.layer3.0.bn3.moving_variance
        , %para222 : Ref[Tensor(F32)][1024]    # resnet.layer3.1.bn3.gamma
        , %para223 : Ref[Tensor(F32)][1024]    # resnet.layer3.1.bn3.beta
        , %para224 : Ref[Tensor(F32)][1024]    # resnet.layer3.1.bn3.moving_mean
        , %para225 : Ref[Tensor(F32)][1024]    # resnet.layer3.1.bn3.moving_variance
        , %para226 : Ref[Tensor(F32)][1024]    # resnet.layer3.2.bn3.gamma
        , %para227 : Ref[Tensor(F32)][1024]    # resnet.layer3.2.bn3.beta
        , %para228 : Ref[Tensor(F32)][1024]    # resnet.layer3.2.bn3.moving_mean
        , %para229 : Ref[Tensor(F32)][1024]    # resnet.layer3.2.bn3.moving_variance
        , %para230 : Ref[Tensor(F32)][1024]    # resnet.layer3.3.bn3.gamma
        , %para231 : Ref[Tensor(F32)][1024]    # resnet.layer3.3.bn3.beta
        , %para232 : Ref[Tensor(F32)][1024]    # resnet.layer3.3.bn3.moving_mean
        , %para233 : Ref[Tensor(F32)][1024]    # resnet.layer3.3.bn3.moving_variance
        , %para234 : Ref[Tensor(F32)][1024]    # resnet.layer3.4.bn3.gamma
        , %para235 : Ref[Tensor(F32)][1024]    # resnet.layer3.4.bn3.beta
        , %para236 : Ref[Tensor(F32)][1024]    # resnet.layer3.4.bn3.moving_mean
        , %para237 : Ref[Tensor(F32)][1024]    # resnet.layer3.4.bn3.moving_variance
        , %para238 : Ref[Tensor(F32)][1024]    # resnet.layer3.5.bn3.gamma
        , %para239 : Ref[Tensor(F32)][1024]    # resnet.layer3.5.bn3.beta
        , %para240 : Ref[Tensor(F32)][1024]    # resnet.layer3.5.bn3.moving_mean
        , %para241 : Ref[Tensor(F32)][1024]    # resnet.layer3.5.bn3.moving_variance
        , %para242 : Ref[Tensor(F32)][512]    # resnet.layer2.0.bn3.gamma
        , %para243 : Ref[Tensor(F32)][512]    # resnet.layer2.0.bn3.beta
        , %para244 : Ref[Tensor(F32)][512]    # resnet.layer2.0.bn3.moving_mean
        , %para245 : Ref[Tensor(F32)][512]    # resnet.layer2.0.bn3.moving_variance
        , %para246 : Ref[Tensor(F32)][512]    # resnet.layer2.1.bn3.gamma
        , %para247 : Ref[Tensor(F32)][512]    # resnet.layer2.1.bn3.beta
        , %para248 : Ref[Tensor(F32)][512]    # resnet.layer2.1.bn3.moving_mean
        , %para249 : Ref[Tensor(F32)][512]    # resnet.layer2.1.bn3.moving_variance
        , %para250 : Ref[Tensor(F32)][512]    # resnet.layer2.2.bn3.gamma
        , %para251 : Ref[Tensor(F32)][512]    # resnet.layer2.2.bn3.beta
        , %para252 : Ref[Tensor(F32)][512]    # resnet.layer2.2.bn3.moving_mean
        , %para253 : Ref[Tensor(F32)][512]    # resnet.layer2.2.bn3.moving_variance
        , %para254 : Ref[Tensor(F32)][512]    # resnet.layer2.3.bn3.gamma
        , %para255 : Ref[Tensor(F32)][512]    # resnet.layer2.3.bn3.beta
        , %para256 : Ref[Tensor(F32)][512]    # resnet.layer2.3.bn3.moving_mean
        , %para257 : Ref[Tensor(F32)][512]    # resnet.layer2.3.bn3.moving_variance
        , %para258 : Ref[Tensor(F32)][256]    # resnet.layer1.0.bn3.gamma
        , %para259 : Ref[Tensor(F32)][256]    # resnet.layer1.0.bn3.beta
        , %para260 : Ref[Tensor(F32)][256]    # resnet.layer1.0.bn3.moving_mean
        , %para261 : Ref[Tensor(F32)][256]    # resnet.layer1.0.bn3.moving_variance
        , %para262 : Ref[Tensor(F32)][256]    # resnet.layer1.1.bn3.gamma
        , %para263 : Ref[Tensor(F32)][256]    # resnet.layer1.1.bn3.beta
        , %para264 : Ref[Tensor(F32)][256]    # resnet.layer1.1.bn3.moving_mean
        , %para265 : Ref[Tensor(F32)][256]    # resnet.layer1.1.bn3.moving_variance
        , %para266 : Ref[Tensor(F32)][256]    # resnet.layer1.2.bn3.gamma
        , %para267 : Ref[Tensor(F32)][256]    # resnet.layer1.2.bn3.beta
        , %para268 : Ref[Tensor(F32)][256]    # resnet.layer1.2.bn3.moving_mean
        , %para269 : Ref[Tensor(F32)][256]    # resnet.layer1.2.bn3.moving_variance
        , %para270 : Ref[Tensor(F32)][2048, 1024, 1, 1]    # resnet.layer4.0.down_sample_layer.0.weight
        , %para271 : Ref[Tensor(F32)][1024, 512, 1, 1]    # resnet.layer3.0.down_sample_layer.0.weight
        , %para272 : Ref[Tensor(F32)][512, 256, 1, 1]    # resnet.layer2.0.down_sample_layer.0.weight
        , %para273 : Ref[Tensor(F32)][256, 64, 1, 1]    # resnet.layer1.0.down_sample_layer.0.weight
        , %para274 : Ref[Tensor(F32)][2048]    # resnet.layer4.0.down_sample_layer.1.gamma
        , %para275 : Ref[Tensor(F32)][2048]    # resnet.layer4.0.down_sample_layer.1.beta
        , %para276 : Ref[Tensor(F32)][2048]    # resnet.layer4.0.down_sample_layer.1.moving_mean
        , %para277 : Ref[Tensor(F32)][2048]    # resnet.layer4.0.down_sample_layer.1.moving_variance
        , %para278 : Ref[Tensor(F32)][1024]    # resnet.layer3.0.down_sample_layer.1.gamma
        , %para279 : Ref[Tensor(F32)][1024]    # resnet.layer3.0.down_sample_layer.1.beta
        , %para280 : Ref[Tensor(F32)][1024]    # resnet.layer3.0.down_sample_layer.1.moving_mean
        , %para281 : Ref[Tensor(F32)][1024]    # resnet.layer3.0.down_sample_layer.1.moving_variance
        , %para282 : Ref[Tensor(F32)][512]    # resnet.layer2.0.down_sample_layer.1.gamma
        , %para283 : Ref[Tensor(F32)][512]    # resnet.layer2.0.down_sample_layer.1.beta
        , %para284 : Ref[Tensor(F32)][512]    # resnet.layer2.0.down_sample_layer.1.moving_mean
        , %para285 : Ref[Tensor(F32)][512]    # resnet.layer2.0.down_sample_layer.1.moving_variance
        , %para286 : Ref[Tensor(F32)][256]    # resnet.layer1.0.down_sample_layer.1.gamma
        , %para287 : Ref[Tensor(F32)][256]    # resnet.layer1.0.down_sample_layer.1.beta
        , %para288 : Ref[Tensor(F32)][256]    # resnet.layer1.0.down_sample_layer.1.moving_mean
        , %para289 : Ref[Tensor(F32)][256]    # resnet.layer1.0.down_sample_layer.1.moving_variance
    ) {

#------------------------> 0
    %1 = FuncGraph::fg_42(%para1, %para2)    #(Tensor(F32)[4, 512, 1024], Tensor(F32)[4, 640, 480, 3])    # fg_42=construct.42 #scope: Default
#[CNode]44
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default
      # In file /nfs4-p1/ljt/NLP/final_project/wez/vqa/vqasim_for_train.py(106)/        return self.cast(total_loss, mstype.float32)/#[CNode]45
}
# order:
#   1: construct_wrapper.28:[CNode]44{[0]: ValueNode<FuncGraph> construct.42, [1]: source_input, [2]: image_vec}
#   2: construct_wrapper.28:[CNode]45{[0]: ValueNode<Primitive> Return, [1]: [CNode]44}


# [No.2] construct.42
# In file /nfs4-p1/ljt/NLP/final_project/wez/vqa/vqasim_for_train.py(101)/    def construct(self, source_input, image_vec):/
funcgraph fg_42[fg_28](
        %para290 : Tensor(F32)[4, 512, 1024]    # source_input
        , %para291 : Tensor(F32)[4, 640, 480, 3]    # image_vec
    ) {
    %1 : Tensor(F32)[4, 4] = FuncGraph::fg_46(%para290, %para291)    #(Tensor(F32)[4, 512, 1024], Tensor(F32)[4, 640, 480, 3])    # fg_46=construct.46 #scope: Default
      # In file /nfs4-p1/ljt/NLP/final_project/wez/vqa/vqasim_for_train.py(103)/        similarity_matrix = self.vqa(source_input, image_vec)/#similarity_matrix

#------------------------> 1
    %2 = FuncGraph::fg_43(%1)    #(Tensor(F32)[4, 4])    # fg_43=construct.43 #scope: Default
      # In file /nfs4-p1/ljt/NLP/final_project/wez/vqa/vqasim_for_train.py(105)/        total_loss = self.loss(similarity_matrix)/#total_loss
    %3 = DoSignaturePrimitive::S-Prim-Cast{prim_type=1}[output_names=["output"], input_names=["x", "dst_type"]](%2, F32)    #(Undefined, Undefined) #scope: Default
      # In file /nfs4-p1/ljt/NLP/final_project/wez/vqa/vqasim_for_train.py(106)/        return self.cast(total_loss, mstype.float32)/#[CNode]47
    Primitive::Return{prim_type=1}(%3)    #(Undefined) #scope: Default
      # In file /nfs4-p1/ljt/NLP/final_project/wez/vqa/vqasim_for_train.py(106)/        return self.cast(total_loss, mstype.float32)/#[CNode]48
}
# order:
#   1: construct.42:similarity_matrix{[0]: ValueNode<FuncGraph> construct.46, [1]: source_input, [2]: image_vec}
#   2: construct.42:total_loss{[0]: ValueNode<FuncGraph> construct.43, [1]: similarity_matrix}
#   3: construct.42:[CNode]47{[0]: ValueNode<DoSignaturePrimitive> S-Prim-Cast, [1]: total_loss, [2]: ValueNode<Float> Float32}
#   4: construct.42:[CNode]48{[0]: ValueNode<Primitive> Return, [1]: [CNode]47}


# [No.3] construct.43
# In file /nfs4-p1/ljt/NLP/final_project/wez/vqa/vqasim_for_train.py(67)/    def construct(self, similarity_matrix):/
funcgraph fg_43(
        %para292 : Tensor(F32)[4, 4]    # similarity_matrix
    ) {
    %1 : Tuple[String] = DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}("similarity_matrix")    #(String) #scope: Default/loss-VQASimTrainingLoss
      # In file /nfs4-p1/ljt/NLP/final_project/wez/vqa/vqasim_for_train.py(75)/        label_matrix = Tensor(np.identity(similarity_matrix.shape[0]), dtype=mstype.float32)/#[CNode]49
    %2 : Tuple[Tensor(F32)] = DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}(%para292)    #(Tensor(F32)[4, 4]) #scope: Default/loss-VQASimTrainingLoss
      # In file /nfs4-p1/ljt/NLP/final_project/wez/vqa/vqasim_for_train.py(75)/        label_matrix = Tensor(np.identity(similarity_matrix.shape[0]), dtype=mstype.float32)/#[CNode]50
    %3 : Dictionary[[similarity_matrix,],[Tensor[Float32]]] = DoSignaturePrimitive::S-Prim-make_dict{prim_type=1}(%1, %2)    #(Tuple[String], Tuple[Tensor(F32)]) #scope: Default/loss-VQASimTrainingLoss
      # In file /nfs4-p1/ljt/NLP/final_project/wez/vqa/vqasim_for_train.py(75)/        label_matrix = Tensor(np.identity(similarity_matrix.shape[0]), dtype=mstype.float32)/#[CNode]51

#------------------------> 2
    %4 = Primitive::PyInterpret{prim_type=1}(Script['Tensor(np.identity(similarity_matrix.shape[0]), dtype=mstype.float32)'], {"Tensor": ClassType, "np": NameSpace::Module, "mstype": NameSpace::Module}, %3)    #(String, Dictionary[[Tensor,np,mstype,],[kMetaTypeTypeType,kMetaTypeExternal*2]], Dictionary[[similarity_matrix,],[Tensor[Float32]]]) #scope: Default/loss-VQASimTrainingLoss
      # In file /nfs4-p1/ljt/NLP/final_project/wez/vqa/vqasim_for_train.py(75)/        label_matrix = Tensor(np.identity(similarity_matrix.shape[0]), dtype=mstype.float32)/#label_matrix
    %5 = DoSignaturePrimitive::S-Prim-SoftmaxCrossEntropyWithLogits{prim_type=1}(%para292, %4)    #(Tensor(F32)[4, 4], Undefined) #scope: Default/loss-VQASimTrainingLoss
      # In file /nfs4-p1/ljt/NLP/final_project/wez/vqa/vqasim_for_train.py(80)/        loss, dlogits = self.loss_fn(similarity_matrix, label_matrix)/#[CNode]52
    %6 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%5, I64(1))    #(Undefined, Undefined) #scope: Default/loss-VQASimTrainingLoss
      # In file /nfs4-p1/ljt/NLP/final_project/wez/vqa/vqasim_for_train.py(80)/        loss, dlogits = self.loss_fn(similarity_matrix, label_matrix)/#dlogits
    %7 = Primitive::stop_gradient{prim_type=1}(%6)    #(Undefined) #scope: Default/loss-VQASimTrainingLoss
      # In file /nfs4-p1/ljt/NLP/final_project/wez/vqa/vqasim_for_train.py(105)/        total_loss = self.loss(similarity_matrix)/#[CNode]53
    %8 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%5, I64(0))    #(Undefined, Undefined) #scope: Default/loss-VQASimTrainingLoss
      # In file /nfs4-p1/ljt/NLP/final_project/wez/vqa/vqasim_for_train.py(80)/        loss, dlogits = self.loss_fn(similarity_matrix, label_matrix)/#loss
    %9 = DoSignaturePrimitive::S-Prim-ReduceMean{prim_type=1}[output_names=["y"], keep_dims=Bool(0), input_names=["input_x", "axis"]](%8)    #(Undefined) #scope: Default/loss-VQASimTrainingLoss
      # In file /nfs4-p1/ljt/NLP/final_project/wez/vqa/vqasim_for_train.py(82)/        loss = self.reduce_mean(loss)/#loss
    %10 = Primitive::Depend{prim_type=1}[side_effect_propagate=I64(1)](%9, %7)    #(Undefined, Undefined) #scope: Default/loss-VQASimTrainingLoss
      # In file /nfs4-p1/ljt/NLP/final_project/wez/vqa/vqasim_for_train.py(105)/        total_loss = self.loss(similarity_matrix)/#[CNode]54
    Primitive::Return{prim_type=1}(%10)    #(Undefined) #scope: Default/loss-VQASimTrainingLoss
      # In file /nfs4-p1/ljt/NLP/final_project/wez/vqa/vqasim_for_train.py(83)/        return loss/#[CNode]55
}
# order:
#   1: construct.43:[CNode]49{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: ValueNode<StringImm> similarity_matrix}
#   2: construct.43:[CNode]50{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: similarity_matrix}
#   3: construct.43:[CNode]51{[0]: ValueNode<DoSignaturePrimitive> S-Prim-make_dict, [1]: [CNode]49, [2]: [CNode]50}
#   4: construct.43:label_matrix{[0]: ValueNode<Primitive> PyInterpret, [1]: ValueNode<Script> 'Tensor(np.identity(similarity_matrix.shape[0]), dtype=mstype.float32)', [2]: ValueNode<ValueDictionary> dict: {keys: (Tensor, np, mstype), values: (class 'mindspore.common.tensor.Tensor', Module: 'Namespace:numpy', Module: 'Namespace:mindspore.common.dtype')}, [3]: [CNode]51}
#   5: construct.43:[CNode]52{[0]: ValueNode<DoSignaturePrimitive> S-Prim-SoftmaxCrossEntropyWithLogits, [1]: similarity_matrix, [2]: label_matrix}
#   6: construct.43:loss{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]52, [2]: ValueNode<Int64Imm> 0}
#   7: construct.43:dlogits{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]52, [2]: ValueNode<Int64Imm> 1}
#   8: construct.43:loss{[0]: ValueNode<DoSignaturePrimitive> S-Prim-ReduceMean, [1]: loss}
#   9: construct.43:[CNode]55{[0]: ValueNode<Primitive> Return, [1]: [CNode]54}


#===============================================================================
# num of function graphs in stack: 3
